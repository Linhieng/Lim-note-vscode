import{_ as s,c as e,o as a,a2 as i}from"./chunks/framework.rQ2N3pzP.js";const m=JSON.parse('{"title":"插件使用说明","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Extension/插件使用说明.md","filePath":"docs/Extension/插件使用说明.md"}'),n={name:"docs/Extension/插件使用说明.md"},l=i(`<h1 id="插件使用说明" tabindex="-1">插件使用说明 <a class="header-anchor" href="#插件使用说明" aria-label="Permalink to &quot;插件使用说明&quot;">​</a></h1><h2 id="markdown-preview-enhanced" tabindex="-1"><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/customize-css" target="_blank" rel="noreferrer">Markdown Preview Enhanced</a> <a class="header-anchor" href="#markdown-preview-enhanced" aria-label="Permalink to &quot;[Markdown Preview Enhanced](https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/customize-css)&quot;">​</a></h2><p>通过 <code>markdown-preview-enhanced.previewTheme</code> 配置项修改默认主题，我喜欢用 <code>medium.css</code>。</p><p>还可以自定义样式，<code>ctrl+shift+p</code> 打开 <code>Markdown Preview Enhanced: Customize Css</code>，配置文件默认在 <code>~/.mume/style.less</code> 中。写在 <code>.markdown-preview.markdown-preview</code> 类中的样式将在所有 markdown 预览中生效。想要单独为某个 markdown 指定样式，可以在 markdown 开头中添加以下 id 或者 class, 然后在 <code>~/.mume/style.less</code> 编写对应的样式就可以了。如果不想在 <code>~/.mume/style.less</code> 写样式，可以直接在 markdown 中导入样式表。支持 less 或 css 文件。</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-id&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     &lt;!-- 为当前 markdown 指定 id --&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-class1 my-class2&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;!-- 为当前 markdown 指定 class --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@import &quot;my-style.less&quot;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 导入指定样式文件路径 --&gt;</span></span></code></pre></div><p>我的 markdown 中常见的元素有：</p><ul><li>普通文本：<code>p</code>, <code>li</code></li><li>标题：<code>h2</code>, <code>h3</code>, <code>h4</code></li><li>代码引用：<code>code</code> 注意代码块中也有 <code>code</code> 元素。</li><li>代码块引用：<code>pre</code></li><li>块引用：<code>blockquote</code></li><li>表格：<code>table</code>, <code>tr</code>, <code>th</code>, <code>td</code></li></ul><p>……相见恨晚！我早该知道有这个功能的！不说了，我现在沉迷在 css 中了！</p><h2 id="cspell-插件" tabindex="-1">cSpell 插件 <a class="header-anchor" href="#cspell-插件" aria-label="Permalink to &quot;cSpell 插件&quot;">​</a></h2><p>常用注释：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- spell-checker:ignore  ohhhhhhhhhh --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- spell-checker:word    cuda cuvid hwaccels --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- spell-checker:enableCompoundWords --&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 允许单词直接组合，比如 helloworld。但不一定有效，比如 runonsave</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- spell-checker:disable --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- spell-checker:enable --&gt;</span></span></code></pre></div><p>下面这个用在 settings.json 中忽略配置项配置项中的特殊拼写。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// spell-checker:ignoreRegExp /(?&lt;!\\/.*)(?&lt;=&quot;[^&quot;]+&quot;): .*/</span></span></code></pre></div><p>但还是不推荐使用正则，因为使用上有点奇怪，比如 <code>// spell-checker:ignoreRegExp /^ *&quot;.*/</code> 案例应该会忽略任何以 任意空格 + <code>&quot;</code> 开头的内容，但实际上并不是。</p>`,14),t=[l];function o(d,c,p,h,r,k){return a(),e("div",null,t)}const u=s(n,[["render",o]]);export{m as __pageData,u as default};
