import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.rQ2N3pzP.js";const E=JSON.parse('{"title":"快捷键","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Keyboard/README.md","filePath":"docs/Keyboard/README.md"}'),e={name:"docs/Keyboard/README.md"},t=n(`<h1 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h1><p><a href="https://github.com/Linhieng/vs-keymap/blob/main/src/keybindings.jsonc" target="_blank" rel="noreferrer">点击查看我自定义的快捷键</a></p><h2 id="when-clause" tabindex="-1">when clause <a class="header-anchor" href="#when-clause" aria-label="Permalink to &quot;when clause&quot;">​</a></h2><p>when 表达式中的大部分条件操作符和 JavaScript 语法一致。需要注意的只有 <code>=~</code>, 该操作符用于匹配正则。此外还有 <code>in</code> 和 <code>not in</code> 操作符，和 Python 的类似。</p><p>when 表达式的左值有很多，目前只记录一些我用到的。至于右值，基本是和左值相关联的。所有有效的左值可以在 <a href="https://code.visualstudio.com/api/references/when-clause-contexts#available-context-keys" target="_blank" rel="noreferrer">when available-context-keys</a> 查看。</p><p>编写好 when 表达式后，可以在 keyboard shortcuts (<code>ctrl+k,s</code>) 中查看一下，如果发现显示为 <code>-</code>，则说明表达式语法出错。</p><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">activePanel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;workbench.panel.output&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要求 “OUTPUT” 面板显示</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">editorLangId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;python&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定文件类型为 python</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceFilename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用正则指定文件名。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceExtname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定文件后缀名为 js</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">editorHasSelection</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要求没有选中任何文本</span></span></code></pre></div>`,8),l=[t];function h(p,k,r,c,o,d){return i(),a("div",null,l)}const y=s(e,[["render",h]]);export{E as __pageData,y as default};
