import{_ as e,c as o,o as i,a2 as s}from"./chunks/framework.rQ2N3pzP.js";const t="/Lim-note-vscode/assets/image.6rr7GjMG.png",m=JSON.parse('{"title":"收集的配置项","description":"","frontmatter":{},"headers":[],"relativePath":"docs/setting/README.md","filePath":"docs/setting/README.md"}'),d={name:"docs/setting/README.md"},c=s('<h1 id="收集的配置项" tabindex="-1">收集的配置项 <a class="header-anchor" href="#收集的配置项" aria-label="Permalink to &quot;收集的配置项&quot;">​</a></h1><p><a href="https://code.visualstudio.com/api/ux-guidelines/overview" target="_blank" rel="noreferrer">The VS Code interface can roughly be divided into two main concepts: <strong>containers</strong> and <strong>items</strong>. Generally speaking, containers can be considered the larger sections of the VS Code interface that render one or more items: </a><img src="https://code.visualstudio.com/assets/api/ux-guidelines/examples/architecture-containers.png" alt="containers"></p><p><img src="'+t+`" alt="items"></p><p>说明：</p><ul><li>容易可视化操作的配置项不会记录，比如 <code>&quot;window.commandCenter&quot;: false</code> 配置项可以直接在窗口顶部通过鼠标左键操作。</li><li>太过于常见的配置项不会记录，比如 <code>&quot;editor.fontSize&quot;: 16</code>。</li><li>见名思意的配置项不会详细记录，比如 <code>&quot;editor.lineHeight&quot;: 32</code>。</li><li>一些特定情况下触发的配置项不会记录，比如不小心开启讲述人功能时，vscode 会询问是否使用辅助功能，选择否后会增加 <code>&quot;editor.accessibilitySupport&quot;: &quot;off&quot;</code> 配置项。</li><li>会记录的配置项也不会面面俱到，比如 <code>&quot;editor.suggestOnTriggerCharacters&quot;: true</code> 这种有关 suggest 的不会记录一条一条的记录，只会记录如何搜索（给出正则表达式），当有需要的时候，可以自行在默认配置文件 <code>defaultSettings.json</code> 中查找到。</li></ul><p>没有记录的配置项，但有用的配置项，大多数都会放在 <a href="../backup/settings.json">我的配置项文件中</a></p><h2 id="🍕-单行配置项" tabindex="-1">🍕 单行配置项 <a class="header-anchor" href="#🍕-单行配置项" aria-label="Permalink to &quot;🍕 单行配置项&quot;">​</a></h2><h3 id="配置项-suggest" tabindex="-1">配置项 - <code>suggest</code> <a class="header-anchor" href="#配置项-suggest" aria-label="Permalink to &quot;配置项 - \`suggest\`&quot;">​</a></h3><p>配置项中的 suggest, 指的是默认代码提示，或者自定义的代码片段（snippets）。</p><p>推荐的正则搜索表达式为：<code>&quot;editor\\..*suggest.*</code></p><p>需要说明的配置项有：</p><ul><li><p><code>editor.suggestSelection</code>, 该配置项可以控制 suggest 列表中焦点的初始位置。有下面三个可选值：</p><ul><li>默认值 <code>first</code>, 表示默认焦点始终是第一项</li><li><code>recentlyUsed</code>, 初始焦点会定位到最近选择过的配置项。比如键入 <code>console.</code> 时，默认位置是 <code>assets</code>, 但如果你最近选择过 <code>log</code> 则会自动定位到 <code>log</code> 项。</li><li><code>recentlyUsedByPrefix</code>, 定位焦点的依据是：根据你当前输入的前缀，查找你最近输入该前缀时选择的是哪一项。也就是说，不同的前缀将会匹配不同的建议项。 <ul><li>比如你在键入 <code>l</code> 时选中 <code>let</code>, 而在键入 <code>le</code> 时选中 <code>length</code>, 那么下一次键入，当你键入前缀 <code>l</code> 时, 它会提供 <code>let</code> 给你选择，而当你再键入一个 e 组成 <code>le</code> 前缀时，它会提供 <code>length</code> 供你选择。</li><li>想要用好该配置项，需要你养成一些习惯。比如每当你输入前缀 <code>co</code> 时表示你要的是 <code>console</code>, 而当你输入前缀 <code>con</code> 时表示你要选择的是 <code>const</code>。只有这样，这个配置项才能发挥出它该有的优势。如果你没有养成习惯，那么这个配置项可能会让你很困惑，比如你键入 <code>con</code> 时既可能选择 <code>console</code>, 也可能选择 <code>const</code> 则默认焦点会频繁的改变，这是非常低效的行为。</li></ul></li><li>⚠️注意事项： <ul><li>该配置项只是改变焦点初始位置，不会调整建议列表中的每一项的顺序。</li><li>只有通过建议列表选中时，才会记录该建议项。如果是自己补全的，则不会被认为是最近选择过的。</li></ul></li></ul></li><li><p><code>editor.acceptSuggestionOnCommitCharacter</code>。当你输入 “commit 字符” 时，是否选中当前 suggest 项。在 JavaScript 中的 “commit 字符” 有 <code>.</code>, <code>;</code>, <code>(</code>, <code>,</code></p><ul><li>默认值 <code>true</code>。 想要习惯这个配置项，需要养成一个习惯：当你想要的内容不在 suggest 列表中时，你需要先按下 <code>ESC</code> 关闭 suggest 列表，然后再键入你的 “commit 字符”。</li><li><code>false</code>。此时如果想要选择，需要按下回车 <code>enter</code>。如果不想按下回车时选中 suggest 项，请配置 <code>editor.acceptSuggestionOnEnter</code>。</li><li>说明：我最开始不习惯 vscode, 所以喜欢直接设置为 <code>false</code>, 但其实，当我想要的内容不在 suggest 列表中时，我可能需要想想代码写的对不对。或者是否正确的导入了对应语言的代码片段。如果输入的内容经常不在 suggest 列表中，则应该设置 <code>editor.suggestOnTriggerCharacters</code> 为 <code>false</code>, 这样就不会在键入时自动显示 suggest 列表了。而当需要 suggest 时，依旧可以通过默认快捷键 <code>ctrl+i</code> 的方式显示 suggest 列表。</li></ul></li><li><p><code>editor.suggest.matchOnWordStartOnly</code>。默认 <code>false</code>。由于我的英语不算很棒，某些语言的代码提示也还记的不熟，所以目前还需要设置为 <code>true</code>。当越来越熟练后，应该恢复默认值，这样能够更精准的定位我们想要的 suggest。</p></li><li><p><code>editor.snippetSuggestions</code>。设置为 <code>top</code>，可以让 snippets 排在前面。但这要求我不滥用 snippets, 如果我设置的 snippets 容易与默认的代码片段冲突，则会让效率变低。</p></li></ul><h3 id="配置项-空格、制表符、缩进" tabindex="-1">配置项 - 空格、制表符、缩进 <a class="header-anchor" href="#配置项-空格、制表符、缩进" aria-label="Permalink to &quot;配置项 - 空格、制表符、缩进&quot;">​</a></h3><ul><li><p><code>editor.tabSize</code>。指定制表符的宽度（或者按下 tab 键时空格的数量）。</p></li><li><p><code>editor.insertSpaces</code>。默认 <code>true</code>，表示按下 tab 键时插入空格，而不是插入制表符。格式化时，会根据该配置项来选择空格缩进或者制表符缩进。（但是，最需要统一缩进的 Python 却不支持。在 Python 中格式化时，空格缩进和制表符缩进会共存！）</p></li><li><p><code>editor.detectIndentation</code>。默认 <code>true</code>。此时会覆盖 <code>editor.tabSize</code> 和 <code>editor.insertSpaces</code> 配置项。也就是说，会根据文件的原有的内容来设置 <code>editor.tabSize</code> 和 <code>editor.insertSpaces</code> 的值。格式化时也一样。</p></li><li><p><code>&quot;editor.indentSize&quot;: &quot;tabSize&quot;</code> 该配置项无法修改。之所以存在这个配置项，可能是在为未来考虑吧。</p></li><li><p><code>editor.renderWhitespace</code>。指定什么时候会显示空格、制表符。<code>boundary</code> 属性值表示，除了单词之间的空格和制表符不显示，其他位置都显示</p></li><li><p><code>editor.useTabStops</code>。默认为 <code>true</code>。效果是：当空格作为缩进时，删除时可以删除多个空格，行为上就跟删除制表符一样。设置为 <code>false</code> 时，删除空格会一个一个地删除.</p></li><li><p><code>editor.stickyTabStops</code>。默认为 <code>false</code>。当设置为 <code>true</code> 时，光标在空格缩进上移动时，空格表现的像制表符一样。比如光标左右移动时将跳过一个制表符的宽度（多个空格），光标永远无法停留在中间的空格。</p></li><li><p>如果将 <code>useTabStops</code> 和 <code>stickyTabStops</code> 都设置为 <code>true</code>，那么空格缩进完全等同于制表符缩进。</p></li><li><p><code>editor.wrappingIndent</code>。自动换行时，溢出内容是否要进行缩进。以及如何缩进。</p><ul><li>比如在 markdown 中设置 <code>&quot;deepIndent&quot;</code>。表示溢出内容换行时缩进两个缩进长度。视觉上效果比较好。</li></ul></li><li><p><code>editor.autoIndent</code>。换行时，应该如何缩进。</p><ul><li><code>none</code>。始终不缩进。也就是说每次换行都会回到行首。</li><li><code>keep</code>。保持当前行的缩进量。也就是不会自动增加缩进。</li><li><code>brackets</code>。保留当前行的缩进量。但尊重编程语言所定义的 brackets。</li><li><code>advanced</code>。在 <code>brackets</code> 的基础上，调用编程语言所定义的 onEnterRules 。</li><li><code>full</code>。在 <code>advanced</code> 的基础上，尊重编程语言所定义的缩进规则。</li><li>默认是 <code>full</code>，之所以记录这个配置项，就是想告诉自己，不要想着能怎么改，乖乖使用默认的就行。</li></ul></li></ul><h3 id="配置项-终端" tabindex="-1">配置项 - 终端 <a class="header-anchor" href="#配置项-终端" aria-label="Permalink to &quot;配置项 - 终端&quot;">​</a></h3><ul><li><code>terminal.integrated.defaultLocation</code>。配置新建终端时，在哪里创建。 <ul><li>默认是 <code>view</code>，也就是在下方的面板中创建终端窗口</li><li>设置为 <code>editor</code> 可以在编辑器中创建。效果等同于将终端拖拽到编辑区域中。这样终端能显示的更大。</li></ul></li><li><code>terminal.integrated.defaultProfile.windows</code>。配置默认终端 <ul><li><p>可选值只能从 <code>terminal.integrated.profiles.windows</code> 配置项中选取，默认提供了 <code>PowerShell</code>, <code>Command Prompt</code>, <code>Git Bash</code>。更多内容可以参考<a href="https://code.visualstudio.com/docs/terminal/profiles" target="_blank" rel="noreferrer">官方文档 terminal profiles</a></p></li><li><p>如果想要更改终端的默认参数，也是在 <code>terminal.integrated.profiles.windows</code> 中创建自己的终端别名。比如下面这样：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terminal.integrated.profiles.windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;myTerminal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个就是我们创建的别名。&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;myTerminal&quot;,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PowerShell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 也可以指定路径： &quot;path&quot;: &quot;C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe&quot;,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动终端时附加的参数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;-noexit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当后面会带上命令时, 就需要明确告诉程序执行完后 &quot;不要退出&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;clear;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分号在 powershell 是命令分隔符。powershell 中没有 &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;echo hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div></li></ul></li></ul>`,16),a=[c];function l(n,r,p,u,h,g){return i(),o("div",null,a)}const E=e(d,[["render",l]]);export{m as __pageData,E as default};
