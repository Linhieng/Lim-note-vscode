import{_ as i,c as s,o as a,a2 as e}from"./chunks/framework.rQ2N3pzP.js";const u=JSON.parse('{"title":"vscode 1.82 简介","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Updates/v1_82.md","filePath":"docs/Updates/v1_82.md"}'),t={name:"docs/Updates/v1_82.md"},n=e(`<h1 id="vscode-1-82-简介" tabindex="-1">vscode 1.82 简介 <a class="header-anchor" href="#vscode-1-82-简介" aria-label="Permalink to &quot;vscode 1.82 简介&quot;">​</a></h1><p>我只记录对我个人来说有趣的特性。完整的更新记录请查看<a href="https://code.visualstudio.com/updates/v1_82" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="workbench" tabindex="-1">Workbench <a class="header-anchor" href="#workbench" aria-label="Permalink to &quot;Workbench&quot;">​</a></h2><h3 id="built-in-port-forwarding" tabindex="-1">Built-in port forwarding <a class="header-anchor" href="#built-in-port-forwarding" aria-label="Permalink to &quot;Built-in port forwarding&quot;">​</a></h3><ol><li>打开一个想要在网络上共享的文件夹</li><li>在终端上运行 <code>npx serve</code>，或者自己搭建一个 serve</li><li>命令行（ctrl+shift+p）运行 <code>ports: focus on Ports View</code>，选择一个端口启动</li><li>点击对应链接就可以在线上访问了，默认是私有的，只能登录对应的 github 账号才能看到</li></ol><h3 id="控制是否允许鼠标和键盘快捷键来关闭-pinned-tabs" tabindex="-1">控制是否允许鼠标和键盘快捷键来关闭 pinned tabs <a class="header-anchor" href="#控制是否允许鼠标和键盘快捷键来关闭-pinned-tabs" aria-label="Permalink to &quot;控制是否允许鼠标和键盘快捷键来关闭 pinned tabs&quot;">​</a></h3><blockquote><p>所谓 pinned tab，就是将某个 tab 固定在上方。可以通过鼠标右键点击 pin 来固定，或者通过快捷键 <code>ctrl+k, shift+enter</code> 来切换是否固定。</p></blockquote><p><code>workbench.editor.preventPinnedEditorClose</code> 配置项有以下可选值：</p><ul><li><code>keyboardAndMouse</code> 默认，不允许鼠标和键盘来关闭被固定的 tab</li><li><code>keyboard</code> 不允许键盘快捷键关闭（ctrl+w）</li><li><code>mouse</code> 不允许鼠标中键关闭</li><li><code>never</code> 允许鼠标和键盘快捷键来关闭</li></ul><h2 id="editor" tabindex="-1">Editor <a class="header-anchor" href="#editor" aria-label="Permalink to &quot;Editor&quot;">​</a></h2><h3 id="允许通过快捷键快速定位-code-actions-和-quickfix-的-navigation" tabindex="-1">允许通过快捷键快速定位 Code Actions 和 QuickFix 的 navigation <a class="header-anchor" href="#允许通过快捷键快速定位-code-actions-和-quickfix-的-navigation" aria-label="Permalink to &quot;允许通过快捷键快速定位 Code Actions 和 QuickFix 的 navigation&quot;">​</a></h3><p>简单的说，就是当执行了某个 Code Actions 或 QuickFix 时，会有一些选项，现在可以通过它们的首字母来快速切换了，不需要按上下键。</p><blockquote><p>code actions: 比如选中某段代码，然后按下 <code>ctrl+shift+R</code> 触发重构，这就是一个 code actions</p></blockquote><h3 id="支持保存-json-文件时自动排序" tabindex="-1">支持保存 json 文件时自动排序 <a class="header-anchor" href="#支持保存-json-文件时自动排序" aria-label="Permalink to &quot;支持保存 json 文件时自动排序&quot;">​</a></h3><p>开启 <code>json.sortOnSave.enable</code> 为 <code>true</code> 即可在保存 json/jsonc 的时候自动排序。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排序前：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排序后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="diff-editor" tabindex="-1">Diff Editor <a class="header-anchor" href="#diff-editor" aria-label="Permalink to &quot;Diff Editor&quot;">​</a></h2><ul><li><p><code>diffEditor.experimental.showMoves</code> 配置项，设置为 true 时能够显示代码块的移动。</p></li><li><p><code>diffEditor.hideUnchangedRegions.enabled</code> 配置项，设置为 true 时会自动折叠（collapsing）未变更的代码。</p></li><li><p><code>diffEditor.useInlineViewWhenSpaceIsLimited</code> 配置项，默认情况下，当两个 diff 宽度太小时，会自动变为一个 diff。设置为 false 可以禁止这一行为（不清楚有什么场景会用到，都看不见内容了）。</p></li></ul><h2 id="ternimal" tabindex="-1">Ternimal <a class="header-anchor" href="#ternimal" aria-label="Permalink to &quot;Ternimal&quot;">​</a></h2><ul><li><code>terminal.integrated.hideOnStartup</code> 默认为 <code>never</code>，如果关闭某个项目时 ternimal 是显示状态的，那么再次打开时也会自动显示。设置为 <code>always</code> 可以禁止这一行为，这样一来每次打开之前的项目时，都不会自动显示出 ternimal 了。</li></ul><h2 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">​</a></h2><p>一个非常有用的更新，虽然只有短短几句话，但非常有用。</p><blockquote><p><strong>Source map loading improvements</strong></p><p>We made many improvements to the way source maps are loaded in this release:</p><ul><li>Source maps in some common cases, like in applications compiled with the tsc command line, are loaded 3-5x faster.</li><li>Hot module reloading from the Vite dev server is now supported.</li><li>Source maps can now be automatically loaded from authenticated endpoints.</li></ul></blockquote><p>其他的不清楚，但有关 vite 那条，指的是通过 vite 项目调试 vue 源码时，不需要在 vite.config.js 中配置以下内容了</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optimizeDeps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="language" tabindex="-1">language <a class="header-anchor" href="#language" aria-label="Permalink to &quot;language&quot;">​</a></h2><p>搭配以下配置项：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;editor.inlayHints.enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;on&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选，因为这是默认指</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typescript.inlayHints.parameterNames.enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须，因为不是默认值</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript.inlayHints.parameterNames.enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须，因为不是默认值</span></span></code></pre></div><p>效果是：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未配置前，效果是：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">312</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置后，效果是：可以直接点击 a，b 参数调到对对应声明的位置（可能是声明文件）我记得这个功能在 idea 中一直都有的。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">312</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="preview-features" tabindex="-1">Preview Features <a class="header-anchor" href="#preview-features" aria-label="Permalink to &quot;Preview Features&quot;">​</a></h2><p>打开 Command Palette（ctrl+p），输入 <code>%</code> 就可以在当前项目（workspace）中快速搜索对应内容了。</p>`,32),l=[n];function h(o,p,d,r,k,c){return a(),s("div",null,l)}const g=i(t,[["render",h]]);export{u as __pageData,g as default};
